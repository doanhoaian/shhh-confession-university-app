package vn.dihaver.tech.shhh.confession.feature.home

import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import androidx.paging.PagingData
import androidx.paging.cachedIn
import androidx.paging.map
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.flatMapLatest
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.launch
import org.threeten.bp.LocalDateTime
import vn.dihaver.tech.shhh.confession.core.data.local.datastore.SessionManager
import vn.dihaver.tech.shhh.confession.core.domain.auth.model.UserSession
import vn.dihaver.tech.shhh.confession.core.domain.home.model.FeedItem
import vn.dihaver.tech.shhh.confession.core.domain.home.usecase.GetFeedUseCase
import vn.dihaver.tech.shhh.confession.core.util.distinctUntilChangedBy
import vn.dihaver.tech.shhh.confession.feature.home.data.mapper.toUiModel
import vn.dihaver.tech.shhh.confession.feature.home.ui.model.PostUiModel
import javax.inject.Inject

@HiltViewModel
class HomeViewModel @Inject constructor(
    private val getFeedUseCase: GetFeedUseCase,
    private val sessionManager: SessionManager
) : ViewModel() {

    private val _selectedTopic = MutableStateFlow<String?>("all")
    val selectedTopic = _selectedTopic.asStateFlow()

    private val _userSession = MutableStateFlow<UserSession?>(null)
    val userSession: StateFlow<UserSession?> = _userSession.asStateFlow()

    var dynamiteHint by mutableStateOf("")
        private set

    init {
        dynamiteHint = getDynamicHint()

        viewModelScope.launch {
            sessionManager.userSession.collect { session ->
                _userSession.value = session
            }
        }
    }

    /**
     * M·ªôt [Flow] c·ªßa [PagingData] bi·ªÉu di·ªÖn ngu·ªìn c·∫•p d·ªØ li·ªáu ƒë∆∞·ª£c ph√¢n trang c·ªßa c√°c b√†i ƒëƒÉng.
     *
     * Lu·ªìng n√†y quan s√°t `_selectedTopic` v√† l·∫•y ngu·ªìn c·∫•p d·ªØ li·ªáu m·ªõi b·∫•t c·ª© khi n√†o ch·ªß ƒë·ªÅ thay ƒë·ªïi.
     * N√≥ s·ª≠ d·ª•ng `getFeedUseCase` ƒë·ªÉ l·∫•y d·ªØ li·ªáu ngu·ªìn c·∫•p d·ªØ li·ªáu, sau ƒë√≥ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi th√†nh
     * c√°c phi√™n b·∫£n `PostUiModel` ph√π h·ª£p ƒë·ªÉ hi·ªÉn th·ªã trong UI.
     *
     * To√°n t·ª≠ `cachedIn(viewModelScope)` ƒë·∫£m b·∫£o r·∫±ng PagingData ƒë∆∞·ª£c l∆∞u trong b·ªô nh·ªõ ƒë·ªám trong
     * ph·∫°m vi c·ªßa ViewModel, ngƒÉn ng·ª´a m·∫•t d·ªØ li·ªáu trong qu√° tr√¨nh thay ƒë·ªïi c·∫•u h√¨nh (v√≠ d·ª•: xray m√†n h√¨nh)
     * v√† cho ph√©p t·∫£i v√† hi·ªÉn th·ªã d·ªØ li·ªáu hi·ªáu qu·∫£.
     *
     * Khi `_selectedTopic` ph√°t ra gi√° tr·ªã m·ªõi:
     * 1. `flatMapLatest` h·ªßy m·ªçi ho·∫°t ƒë·ªông l·∫•y ngu·ªìn c·∫•p d·ªØ li·ªáu tr∆∞·ªõc ƒë√≥.
     * 2. `getFeedUseCase` ƒë∆∞·ª£c g·ªçi v·ªõi `schoolId` hi·ªán t·∫°i v√† `topicValue`.
     * - N·∫øu `topicValue` l√† "all", n√≥ ƒë∆∞·ª£c coi l√† null (c√≥ nghƒ©a l√† kh√¥ng c√≥ b·ªô l·ªçc ch·ªß ƒë·ªÅ c·ª• th·ªÉ).
     * 3. `PagingData<FeedItem>` k·∫øt qu·∫£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi:
     * - M·ªói `FeedItem` ƒë∆∞·ª£c √°nh x·∫° t·ªõi `PostUiModel` b·∫±ng h√†m m·ªü r·ªông `toUiModel()`.
     * 4. `PagingData<PostUiModel>` ƒë√£ chuy·ªÉn ƒë·ªïi ƒë∆∞·ª£c ph√°t ra b·ªüi lu·ªìng n√†y.
     */
    @OptIn(ExperimentalCoroutinesApi::class)
    val feedPagingFlow: Flow<PagingData<PostUiModel>> = _selectedTopic
        .flatMapLatest { topicValue ->
            getFeedUseCase(
                topicValue = if (topicValue == "all") null else topicValue
            ).map { pagingData: PagingData<FeedItem> ->
                pagingData.map { feedItem ->
                    feedItem.toUiModel()
                }
            }
        }
        .distinctUntilChangedBy { postUiModel -> postUiModel.id }
        .cachedIn(viewModelScope)

    /**
     * X·ª≠ l√Ω vi·ªác l·ª±a ch·ªçn m·ªôt danh m·ª•c.
     *
     * N·∫øu ch·ªß ƒë·ªÅ m·ªõi ƒë∆∞·ª£c ch·ªçn kh√°c v·ªõi ch·ªß ƒë·ªÅ ƒëang ƒë∆∞·ª£c ch·ªçn,
     * n√≥ c·∫≠p nh·∫≠t LiveData `_selectedTopic` v·ªõi gi√° tr·ªã ch·ªß ƒë·ªÅ m·ªõi.
     *
     * @param topicValue Gi√° tr·ªã c·ªßa danh m·ª•c ƒë√£ ƒë∆∞·ª£c ch·ªçn.
     */
    fun onCategorySelected(topicValue: String) {
        if (_selectedTopic.value != topicValue) {
            _selectedTopic.value = topicValue
        }
    }

    private fun getDynamicHint(): String {
        val currentHour = LocalDateTime.now().hour
        return when (currentHour) {
            in 5..10 -> "Ch√†o bu·ªïi s√°ng, campus c√≥ g√¨ m·ªõi kh√¥ng? ‚òÄÔ∏è"
            in 11..13 -> "Tr∆∞a nay ƒÉn g√¨, ·ªü ƒë√¢u ngon nh·ªâ? üçú"
            in 14..17 -> "Chi·ªÅu nay h·ªçc h√†nh c√≥ cƒÉng th·∫≥ng kh√¥ng? Chia s·∫ª v√†i d√≤ng nh√©."
            in 18..21 -> "T·ªëi r·ªìi, c√≥ ho·∫°t ƒë·ªông g√¨ hay ho kh√¥ng? üåô"
            else -> "C√∫ ƒë√™m c√≤n ai th·ª©c kh√¥ng? K·ªÉ chuy·ªán ƒë√™m khuya n√†o... ü¶â"
        }
    }
}